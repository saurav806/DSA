//Link:- https://leetcode.com/problems/deepest-leaves-sum/description/

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int deepestLeavesSum(TreeNode* root) {
        queue<TreeNode *>q;
        vector<int>level;
        vector<vector<int>>levels;
        q.push(root);
        q.push(nullptr);
        while(!q.empty()){
            TreeNode* node=q.front();
            
            q.pop();
            if(node){
                level.push_back(node->val);
                if(node->left) q.push(node->left);
                if(node->right) q.push(node->right);
            }
            else{
                levels.push_back(level);
                level.clear();
                if(!q.empty()) q.push(nullptr);
            }
        }
        int n=levels.size()-1;
        vector<int>last= levels[n];
        return accumulate(last.begin(),last.end(),0);

    }
};
